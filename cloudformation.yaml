AWSTemplateFormatVersion: '2010-09-09'
Description: 'AI-Powered Photography Portfolio - Complete Infrastructure'

Parameters:
  ProjectName:
    Type: String
    Default: 'photo-portfolio'
    Description: 'Name prefix for all resources'
    AllowedPattern: '^[a-z0-9-]+$'
    ConstraintDescription: 'Must contain only lowercase letters, numbers, and hyphens'

  Environment:
    Type: String
    Default: 'prod'
    AllowedValues: ['dev', 'staging', 'prod']
    Description: 'Environment name'

  CustomDomainName:
    Type: String
    Default: ''
    Description: 'Optional custom domain name (leave empty to skip)'

  CertificateArn:
    Type: String
    Default: ''
    Description: 'SSL Certificate ARN for custom domain (required if using custom domain)'

Resources:
  # ============================================================================
  # S3 BUCKETS
  # ============================================================================
  
  IntakeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-intake-${AWS::AccountId}-${AWS::Region}'
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 7
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt ImageProcessorFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .jpg
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt ImageProcessorFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .jpeg
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt ImageProcessorFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .png

  GalleryBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-img-${AWS::AccountId}-${AWS::Region}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3600

  GalleryBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref GalleryBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub '${GalleryBucket}/*'
          - Sid: CloudFrontOriginAccessIdentity
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}'
            Action: 's3:GetObject'
            Resource: !Sub '${GalleryBucket}/*'

  ArchiveBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-archive-${AWS::AccountId}-${AWS::Region}'
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToIA
            Status: Enabled
            TransitionInDays: 30
            StorageClass: STANDARD_IA
          - Id: TransitionToGlacier
            Status: Enabled
            TransitionInDays: 90
            StorageClass: GLACIER
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  WebBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-web-${AWS::AccountId}-${AWS::Region}'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3600

  WebBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub '${WebBucket}/*'
          - Sid: CloudFrontOriginAccessIdentity
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}'
            Action: 's3:GetObject'
            Resource: !Sub '${WebBucket}/*'

  # ============================================================================
  # DYNAMODB TABLE
  # ============================================================================

  ImagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-images'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: imageId
          AttributeType: S
        - AttributeName: gallery
          AttributeType: S
        - AttributeName: uploadDate
          AttributeType: S
      KeySchema:
        - AttributeName: imageId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: gallery-uploadDate-index
          KeySchema:
            - AttributeName: gallery
              KeyType: HASH
            - AttributeName: uploadDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # ============================================================================
  # IAM ROLES AND POLICIES
  # ============================================================================

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub '${IntakeBucket}/*'
                  - !Sub '${GalleryBucket}/*'
                  - !Sub '${ArchiveBucket}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !GetAtt IntakeBucket.Arn
                  - !GetAtt GalleryBucket.Arn
                  - !GetAtt ArchiveBucket.Arn
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt ImagesTable.Arn
                  - !Sub '${ImagesTable.Arn}/index/*'
        - PolicyName: RekognitionAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rekognition:DetectLabels
                  - rekognition:DetectFaces
                  - rekognition:DetectText
                Resource: '*'
        - PolicyName: CloudFrontAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudfront:CreateInvalidation
                Resource: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'

  APIGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-apigateway-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaInvokeAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt ImageProcessorFunction.Arn
                  - !GetAtt APIHandlerFunction.Arn

  # ============================================================================
  # LAMBDA FUNCTIONS
  # ============================================================================

  ImageProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-image-processor'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          INTAKE_BUCKET: !Ref IntakeBucket
          GALLERY_BUCKET: !Ref GalleryBucket
          ARCHIVE_BUCKET: !Ref ArchiveBucket
          DYNAMODB_TABLE: !Ref ImagesTable
          CLOUDFRONT_DISTRIBUTION_ID: !Ref CloudFrontDistribution
      Code:
        ZipFile: |
          import json
          import boto3
          import uuid
          from datetime import datetime

          # Initialize AWS services
          s3 = boto3.client('s3')
          rekognition = boto3.client('rekognition')
          dynamodb = boto3.resource('dynamodb')
          cloudfront = boto3.client('cloudfront')

          def lambda_handler(event, context):
              """
              Enhanced AI image processor with detailed analysis and dynamic categories
              """
              try:
                  # Parse S3 event
                  record = event['Records'][0]
                  bucket = record['s3']['bucket']['name']
                  key = record['s3']['object']['key']
                  
                  print(f"Processing: {key}")
                  
                  # Download the image
                  response = s3.get_object(Bucket=bucket, Key=key)
                  image_data = response['Body'].read()
                  
                  # Enhanced AI Analysis
                  ai_analysis = analyze_image_enhanced(image_data)
                  
                  # Generate gallery filename with dynamic category
                  timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                  gallery_filename = f"{ai_analysis['category']}-{key}"
                  
                  # Upload to gallery bucket
                  s3.put_object(
                      Bucket=os.environ['GALLERY_BUCKET'],
                      Key=f'gallery/{gallery_filename}',
                      Body=image_data,
                      ContentType=get_content_type(key)
                  )
                  
                  # Archive original
                  s3.copy_object(
                      CopySource={'Bucket': bucket, 'Key': key},
                      Bucket=os.environ['ARCHIVE_BUCKET'],
                      Key=f'archive/{key}'
                  )
                  
                  # Add to database with enhanced details
                  add_to_database_enhanced(gallery_filename, ai_analysis, key)
                  
                  # Invalidate CloudFront cache
                  invalidate_cloudfront()
                  
                  # Clean up intake bucket
                  s3.delete_object(Bucket=bucket, Key=key)
                  
                  print(f"Success: {key} -> gallery/{gallery_filename} (Category: {ai_analysis['category']})")
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps({
                          'message': 'Image processed successfully',
                          'category': ai_analysis['category'],
                          'filename': gallery_filename,
                          'aiAnalysis': ai_analysis
                      })
                  }
                  
              except Exception as e:
                  print(f"Error processing {key}: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps({'error': str(e)})
                  }

          def analyze_image_enhanced(image_data):
              # Placeholder for enhanced AI analysis
              return {
                  'category': 'general',
                  'description': 'AI-processed photography',
                  'labels': ['photography'],
                  'confidence_scores': {},
                  'subjects': [],
                  'themes': [],
                  'has_faces': False,
                  'has_text': False,
                  'face_count': 0,
                  'detected_text': None
              }

          def get_content_type(filename):
              extension = filename.lower().split('.')[-1]
              content_types = {
                  'jpg': 'image/jpeg',
                  'jpeg': 'image/jpeg',
                  'png': 'image/png',
                  'gif': 'image/gif'
              }
              return content_types.get(extension, 'image/jpeg')

          def add_to_database_enhanced(filename, ai_analysis, original_filename):
              table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])
              image_id = f"user-{str(uuid.uuid4())[:8]}"
              
              table.put_item(
                  Item={
                      'imageId': image_id,
                      'filename': filename,
                      'title': f"{ai_analysis['category'].title()} Photography",
                      'gallery': ai_analysis['category'],
                      'imageUrl': f'/gallery/{filename}',
                      'uploadDate': datetime.now().isoformat(),
                      'description': ai_analysis['description'],
                      'aiLabels': ai_analysis['labels'],
                      'originalFilename': original_filename,
                      'originalFormat': original_filename.split('.')[-1].upper(),
                      'featured': False,
                      'processingMethod': 'Enhanced AI Analysis'
                  }
              )

          def invalidate_cloudfront():
              try:
                  cloudfront.create_invalidation(
                      DistributionId=os.environ['CLOUDFRONT_DISTRIBUTION_ID'],
                      InvalidationBatch={
                          'Paths': {
                              'Quantity': 2,
                              'Items': ['/', '/api/images']
                          },
                          'CallerReference': f'enhanced-processor-{int(datetime.now().timestamp())}'
                      }
                  )
              except Exception as e:
                  print(f"CloudFront invalidation warning: {str(e)}")

      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  APIHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-api-handler'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref ImagesTable
          INTAKE_BUCKET: !Ref IntakeBucket
          GALLERY_BUCKET: !Ref GalleryBucket
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from datetime import datetime, timedelta

          dynamodb = boto3.resource('dynamodb')
          s3 = boto3.client('s3')

          def lambda_handler(event, context):
              try:
                  path = event.get('path', '')
                  method = event.get('httpMethod', '')
                  
                  # CORS headers
                  headers = {
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Headers': 'Content-Type',
                      'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS'
                  }
                  
                  if method == 'OPTIONS':
                      return {'statusCode': 200, 'headers': headers}
                  
                  if path == '/api/images' and method == 'GET':
                      return get_images(headers)
                  elif path == '/api/galleries' and method == 'GET':
                      return get_galleries(headers)
                  elif path == '/api/upload' and method == 'POST':
                      return get_upload_url(event, headers)
                  elif path.startswith('/api/admin/'):
                      return handle_admin_request(event, headers)
                  else:
                      return {
                          'statusCode': 404,
                          'headers': headers,
                          'body': json.dumps({'error': 'Not found'})
                      }
                      
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': headers,
                      'body': json.dumps({'error': str(e)})
                  }

          def get_images(headers):
              table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])
              response = table.scan()
              
              return {
                  'statusCode': 200,
                  'headers': headers,
                  'body': json.dumps({
                      'images': response['Items'],
                      'count': len(response['Items']),
                      'status': 'success'
                  })
              }

          def get_galleries(headers):
              table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])
              response = table.scan()
              
              galleries = {}
              for item in response['Items']:
                  gallery = item.get('gallery', 'general')
                  galleries[gallery] = galleries.get(gallery, 0) + 1
              
              return {
                  'statusCode': 200,
                  'headers': headers,
                  'body': json.dumps({
                      'galleries': galleries,
                      'status': 'success'
                  })
              }

          def get_upload_url(event, headers):
              body = json.loads(event.get('body', '{}'))
              filename = body.get('fileName', '')
              file_type = body.get('fileType', 'image/jpeg')
              
              # Generate presigned URL
              url = s3.generate_presigned_url(
                  'put_object',
                  Params={
                      'Bucket': os.environ['INTAKE_BUCKET'],
                      'Key': filename,
                      'ContentType': file_type
                  },
                  ExpiresIn=3600
              )
              
              return {
                  'statusCode': 200,
                  'headers': headers,
                  'body': json.dumps({'uploadUrl': url})
              }

          def handle_admin_request(event, headers):
              # Placeholder for admin operations
              return {
                  'statusCode': 200,
                  'headers': headers,
                  'body': json.dumps({'message': 'Admin operation completed'})
              }

      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Lambda permissions for S3 triggers
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ImageProcessorFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt IntakeBucket.Arn

  # ============================================================================
  # API GATEWAY
  # ============================================================================

  RestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-api'
      Description: 'Photography Portfolio API'
      EndpointConfiguration:
        Types:
          - REGIONAL
      BinaryMediaTypes:
        - 'image/*'
        - 'multipart/form-data'

  APIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestAPI
      ParentId: !GetAtt RestAPI.RootResourceId
      PathPart: api

  ImagesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestAPI
      ParentId: !Ref APIResource
      PathPart: images

  ImagesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref ImagesResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIHandlerFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseHeaders:
            Access-Control-Allow-Origin: true

  ImagesOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref ImagesResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseHeaders:
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseHeaders:
            Access-Control-Allow-Headers: true
            Access-Control-Allow-Methods: true
            Access-Control-Allow-Origin: true

  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ImagesMethod
      - ImagesOptionsMethod
    Properties:
      RestApiId: !Ref RestAPI
      StageName: !Ref Environment

  # Lambda permissions for API Gateway
  APILambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref APIHandlerFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPI}/*/*/*'

  # ============================================================================
  # CLOUDFRONT DISTRIBUTION
  # ============================================================================

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'OAI for ${ProjectName}'

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub '${ProjectName} CDN'
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_100
        Aliases: !If
          - HasCustomDomain
          - [!Ref CustomDomainName]
          - !Ref AWS::NoValue
        ViewerCertificate: !If
          - HasCustomDomain
          - AcmCertificateArn: !Ref CertificateArn
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          - CloudFrontDefaultCertificate: true
        Origins:
          - Id: S3-Website
            DomainName: !GetAtt WebBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
          - Id: S3-Images
            DomainName: !GetAtt GalleryBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        DefaultCacheBehavior:
          TargetOriginId: S3-Website
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          Compress: true
          DefaultTTL: 86400
          MaxTTL: 31536000
        CacheBehaviors:
          - PathPattern: '/gallery/*'
            TargetOriginId: S3-Images
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD]
            CachedMethods: [GET, HEAD]
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            Compress: true
            DefaultTTL: 86400
            MaxTTL: 31536000
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # ============================================================================
  # CLOUDWATCH MONITORING
  # ============================================================================

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}'
      RetentionInDays: 14

  ErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-high-error-rate'
      AlarmDescription: 'High error rate in photography portfolio'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref ImageProcessorFunction

Conditions:
  HasCustomDomain: !Not [!Equals [!Ref CustomDomainName, '']]

Outputs:
  WebsiteURL:
    Description: 'CloudFront Distribution URL'
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${ProjectName}-website-url'

  CustomDomainURL:
    Condition: HasCustomDomain
    Description: 'Custom Domain URL'
    Value: !Sub 'https://${CustomDomainName}'
    Export:
      Name: !Sub '${ProjectName}-custom-domain-url'

  APIURL:
    Description: 'API Gateway URL'
    Value: !Sub 'https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${ProjectName}-api-url'

  IntakeBucketName:
    Description: 'S3 Intake Bucket Name'
    Value: !Ref IntakeBucket
    Export:
      Name: !Sub '${ProjectName}-intake-bucket'

  GalleryBucketName:
    Description: 'S3 Gallery Bucket Name'
    Value: !Ref GalleryBucket
    Export:
      Name: !Sub '${ProjectName}-gallery-bucket'

  WebBucketName:
    Description: 'S3 Web Bucket Name'
    Value: !Ref WebBucket
    Export:
      Name: !Sub '${ProjectName}-web-bucket'

  DynamoDBTableName:
    Description: 'DynamoDB Table Name'
    Value: !Ref ImagesTable
    Export:
      Name: !Sub '${ProjectName}-dynamodb-table'

  CloudFrontDistributionId:
    Description: 'CloudFront Distribution ID'
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${ProjectName}-cloudfront-id'

  AdminCredentials:
    Description: 'Admin Login Credentials'
    Value: 'Username: admin, Password: portfolio2024'

  DemoCredentials:
    Description: 'Demo Login Credentials'
    Value: 'Username: demo, Password: demo123'
